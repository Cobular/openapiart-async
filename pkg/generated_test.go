package openapiart_test

import (
	"testing"

	openapiart "github.com/open-traffic-generator/openapiart/pkg"
	"github.com/stretchr/testify/assert"
)

func TestConfigGenerated(t *testing.T) {
	api := openapiart.NewApi()
	config := api.NewPrefixConfig()
	config.SetIeee8021Qbb(true).SetSpace1(1).SetFullDuplex100Mb(1).SetResponse("status_200").SetA("abc").SetB(100.11).SetC(1).SetH(true).SetI([]byte{1, 0, 0, 1, 0, 0, 1, 1}).SetListOfStringValues([]string{"a", "b", "c"}).SetListOfIntegerValues([]int32{1, 2, 3}).SetInteger64(10000000000000000).SetStrLen("abc").SetName("abc")
	v1 := config.RequiredObject()
	v1.SetEA(100.11).SetEB(1.7976931348623157e+308).SetName("abc").SetMParam1("abc").SetMParam2("abc")
	v1.HasName()
	v1.HasMParam1()
	v1.HasMParam2()
	v1.EA()
	v1.EB()
	v1.ToJson()
	v1.ToYaml()
	v1.ToPbText()
	assert.Nil(t, v1.FromJson(v1.ToJson()))
	assert.Nil(t, v1.FromYaml(v1.ToYaml()))
	assert.Nil(t, v1.FromPbText(v1.ToPbText()))
	config.SetRequiredObject(v1)
	v2 := config.OptionalObject()
	v2.SetEA(100.11).SetEB(1.7976931348623157e+308).SetName("abc").SetMParam1("abc").SetMParam2("abc")
	v2.HasName()
	v2.HasMParam1()
	v2.HasMParam2()
	v2.EA()
	v2.EB()
	v2.ToJson()
	v2.ToYaml()
	v2.ToPbText()
	assert.Nil(t, v2.FromJson(v2.ToJson()))
	assert.Nil(t, v2.FromYaml(v2.ToYaml()))
	assert.Nil(t, v2.FromPbText(v2.ToPbText()))
	config.SetOptionalObject(v2)
	v3 := config.E()
	v3.SetEA(100.11).SetEB(1.7976931348623157e+308).SetName("abc").SetMParam1("abc").SetMParam2("abc")
	v3.HasName()
	v3.HasMParam1()
	v3.HasMParam2()
	v3.EA()
	v3.EB()
	v3.ToJson()
	v3.ToYaml()
	v3.ToPbText()
	assert.Nil(t, v3.FromJson(v3.ToJson()))
	assert.Nil(t, v3.FromYaml(v3.ToYaml()))
	assert.Nil(t, v3.FromPbText(v3.ToPbText()))
	config.SetE(v3)
	v4 := config.F()
	v4.SetFA("abc").SetFB(1.7976931348623157e+308)
	v4.HasChoice()
	v4.HasFA()
	v4.HasFB()
	v4.Choice()
	v4.FA()
	v4.FB()
	v4.ToJson()
	v4.ToYaml()
	v4.ToPbText()
	assert.Nil(t, v4.FromJson(v4.ToJson()))
	assert.Nil(t, v4.FromYaml(v4.ToYaml()))
	assert.Nil(t, v4.FromPbText(v4.ToPbText()))
	config.SetF(v4)
	v5 := config.G().Add()
	v5.SetGA("abc").SetGB(1).SetGC(100.11).SetGD("abc").SetGE(1.7976931348623157e+308).SetGF("a").SetName("abc")
	v5.HasChoice()
	v5.HasGA()
	v5.HasGB()
	v5.HasGC()
	v5.HasGD()
	v5.HasGE()
	v5.HasGF()
	v5.HasName()
	v5.ToJson()
	v5.ToYaml()
	v5.ToPbText()
	assert.Nil(t, v5.FromJson(v5.ToJson()))
	assert.Nil(t, v5.FromYaml(v5.ToYaml()))
	assert.Nil(t, v5.FromPbText(v5.ToPbText()))
	v6 := config.J().Add()
	v7 := v6.JA()
	v7.SetEA(100.11).SetEB(1.7976931348623157e+308).SetName("abc").SetMParam1("abc").SetMParam2("abc")
	v7.HasName()
	v7.HasMParam1()
	v7.HasMParam2()
	v7.EA()
	v7.EB()
	v7.ToJson()
	v7.ToYaml()
	v7.ToPbText()
	assert.Nil(t, v7.FromJson(v7.ToJson()))
	assert.Nil(t, v7.FromYaml(v7.ToYaml()))
	assert.Nil(t, v7.FromPbText(v7.ToPbText()))
	v6.SetJA(v7)
	v8 := v6.JB()
	v8.SetFA("abc").SetFB(1.7976931348623157e+308)
	v8.HasChoice()
	v8.HasFA()
	v8.HasFB()
	v8.Choice()
	v8.FA()
	v8.FB()
	v8.ToJson()
	v8.ToYaml()
	v8.ToPbText()
	assert.Nil(t, v8.FromJson(v8.ToJson()))
	assert.Nil(t, v8.FromYaml(v8.ToYaml()))
	assert.Nil(t, v8.FromPbText(v8.ToPbText()))
	v6.SetJB(v8)
	v6.HasChoice()
	v6.HasJA()
	v6.HasJB()
	v6.ToJson()
	v6.ToYaml()
	v6.ToPbText()
	assert.Nil(t, v6.FromJson(v6.ToJson()))
	assert.Nil(t, v6.FromYaml(v6.ToYaml()))
	assert.Nil(t, v6.FromPbText(v6.ToPbText()))
	v9 := config.K()
	v10 := v9.EObject()
	v10.SetEA(100.11).SetEB(1.7976931348623157e+308).SetName("abc").SetMParam1("abc").SetMParam2("abc")
	v10.HasName()
	v10.HasMParam1()
	v10.HasMParam2()
	v10.EA()
	v10.EB()
	v10.ToJson()
	v10.ToYaml()
	v10.ToPbText()
	assert.Nil(t, v10.FromJson(v10.ToJson()))
	assert.Nil(t, v10.FromYaml(v10.ToYaml()))
	assert.Nil(t, v10.FromPbText(v10.ToPbText()))
	v9.SetEObject(v10)
	v11 := v9.FObject()
	v11.SetFA("abc").SetFB(1.7976931348623157e+308)
	v11.HasChoice()
	v11.HasFA()
	v11.HasFB()
	v11.Choice()
	v11.FA()
	v11.FB()
	v11.ToJson()
	v11.ToYaml()
	v11.ToPbText()
	assert.Nil(t, v11.FromJson(v11.ToJson()))
	assert.Nil(t, v11.FromYaml(v11.ToYaml()))
	assert.Nil(t, v11.FromPbText(v11.ToPbText()))
	v9.SetFObject(v11)
	v9.HasEObject()
	v9.HasFObject()
	v9.ToJson()
	v9.ToYaml()
	v9.ToPbText()
	assert.Nil(t, v9.FromJson(v9.ToJson()))
	assert.Nil(t, v9.FromYaml(v9.ToYaml()))
	assert.Nil(t, v9.FromPbText(v9.ToPbText()))
	config.SetK(v9)
	v12 := config.L()
	v12.SetString("abc").SetInteger(44).SetFloat(100.11).SetDouble(1.7976931348623157e+308).SetMac("00:00:00:00:00:0a").SetIpv4("1.1.1.1").SetIpv6("2000::1").SetHex("0x12")
	v12.HasString()
	v12.HasInteger()
	v12.HasFloat()
	v12.HasDouble()
	v12.HasMac()
	v12.HasIpv4()
	v12.HasIpv6()
	v12.HasHex()
	v12.ToJson()
	v12.ToYaml()
	v12.ToPbText()
	assert.Nil(t, v12.FromJson(v12.ToJson()))
	assert.Nil(t, v12.FromYaml(v12.ToYaml()))
	assert.Nil(t, v12.FromPbText(v12.ToPbText()))
	config.SetL(v12)
	v13 := config.Level()
	v14 := v13.L1P1()
	v15 := v14.L2P1()
	v15.SetL3P1("abc")
	v15.HasL3P1()
	v15.ToJson()
	v15.ToYaml()
	v15.ToPbText()
	assert.Nil(t, v15.FromJson(v15.ToJson()))
	assert.Nil(t, v15.FromYaml(v15.ToYaml()))
	assert.Nil(t, v15.FromPbText(v15.ToPbText()))
	v14.SetL2P1(v15)
	v14.HasL2P1()
	v14.ToJson()
	v14.ToYaml()
	v14.ToPbText()
	assert.Nil(t, v14.FromJson(v14.ToJson()))
	assert.Nil(t, v14.FromYaml(v14.ToYaml()))
	assert.Nil(t, v14.FromPbText(v14.ToPbText()))
	v13.SetL1P1(v14)
	v13.HasL1P1()
	v13.HasL1P2()
	v13.ToJson()
	v13.ToYaml()
	v13.ToPbText()
	assert.Nil(t, v13.FromJson(v13.ToJson()))
	assert.Nil(t, v13.FromYaml(v13.ToYaml()))
	assert.Nil(t, v13.FromPbText(v13.ToPbText()))
	config.SetLevel(v13)
	v16 := config.Mandatory()
	v16.SetRequiredParam("abc")
	v16.ToJson()
	v16.ToYaml()
	v16.ToPbText()
	assert.Nil(t, v16.FromJson(v16.ToJson()))
	assert.Nil(t, v16.FromYaml(v16.ToYaml()))
	assert.Nil(t, v16.FromPbText(v16.ToPbText()))
	config.SetMandatory(v16)
	v17 := config.Ipv4Pattern()
	v18 := v17.Ipv4()
	v18.SetValue("1.1.1.1").SetValues([]string{"1.1.1.1"})
	v19 := v18.Increment()
	v19.SetStart("1.1.1.1").SetStep("1.1.1.1").SetCount(1)
	v19.HasStart()
	v19.HasStep()
	v19.HasCount()
	v19.Start()
	v19.Step()
	v19.Count()
	v19.ToJson()
	v19.ToYaml()
	v19.ToPbText()
	assert.Nil(t, v19.FromJson(v19.ToJson()))
	assert.Nil(t, v19.FromYaml(v19.ToYaml()))
	assert.Nil(t, v19.FromPbText(v19.ToPbText()))
	v18.SetIncrement(v19)
	v20 := v18.Decrement()
	v20.SetStart("1.1.1.1").SetStep("1.1.1.1").SetCount(1)
	v20.HasStart()
	v20.HasStep()
	v20.HasCount()
	v20.Start()
	v20.Step()
	v20.Count()
	v20.ToJson()
	v20.ToYaml()
	v20.ToPbText()
	assert.Nil(t, v20.FromJson(v20.ToJson()))
	assert.Nil(t, v20.FromYaml(v20.ToYaml()))
	assert.Nil(t, v20.FromPbText(v20.ToPbText()))
	v18.SetDecrement(v20)
	v18.HasChoice()
	v18.HasValue()
	v18.HasIncrement()
	v18.HasDecrement()
	v18.Choice()
	v18.Value()
	v18.Values()
	v18.ToJson()
	v18.ToYaml()
	v18.ToPbText()
	assert.Nil(t, v18.FromJson(v18.ToJson()))
	assert.Nil(t, v18.FromYaml(v18.ToYaml()))
	assert.Nil(t, v18.FromPbText(v18.ToPbText()))
	v17.SetIpv4(v18)
	v17.HasIpv4()
	v17.ToJson()
	v17.ToYaml()
	v17.ToPbText()
	assert.Nil(t, v17.FromJson(v17.ToJson()))
	assert.Nil(t, v17.FromYaml(v17.ToYaml()))
	assert.Nil(t, v17.FromPbText(v17.ToPbText()))
	config.SetIpv4Pattern(v17)
	v21 := config.Ipv6Pattern()
	v22 := v21.Ipv6()
	v22.SetValue("2000::1").SetValues([]string{"2000::1"})
	v23 := v22.Increment()
	v23.SetStart("2000::1").SetStep("2000::1").SetCount(1)
	v23.HasStart()
	v23.HasStep()
	v23.HasCount()
	v23.Start()
	v23.Step()
	v23.Count()
	v23.ToJson()
	v23.ToYaml()
	v23.ToPbText()
	assert.Nil(t, v23.FromJson(v23.ToJson()))
	assert.Nil(t, v23.FromYaml(v23.ToYaml()))
	assert.Nil(t, v23.FromPbText(v23.ToPbText()))
	v22.SetIncrement(v23)
	v24 := v22.Decrement()
	v24.SetStart("2000::1").SetStep("2000::1").SetCount(1)
	v24.HasStart()
	v24.HasStep()
	v24.HasCount()
	v24.Start()
	v24.Step()
	v24.Count()
	v24.ToJson()
	v24.ToYaml()
	v24.ToPbText()
	assert.Nil(t, v24.FromJson(v24.ToJson()))
	assert.Nil(t, v24.FromYaml(v24.ToYaml()))
	assert.Nil(t, v24.FromPbText(v24.ToPbText()))
	v22.SetDecrement(v24)
	v22.HasChoice()
	v22.HasValue()
	v22.HasIncrement()
	v22.HasDecrement()
	v22.Choice()
	v22.Value()
	v22.Values()
	v22.ToJson()
	v22.ToYaml()
	v22.ToPbText()
	assert.Nil(t, v22.FromJson(v22.ToJson()))
	assert.Nil(t, v22.FromYaml(v22.ToYaml()))
	assert.Nil(t, v22.FromPbText(v22.ToPbText()))
	v21.SetIpv6(v22)
	v21.HasIpv6()
	v21.ToJson()
	v21.ToYaml()
	v21.ToPbText()
	assert.Nil(t, v21.FromJson(v21.ToJson()))
	assert.Nil(t, v21.FromYaml(v21.ToYaml()))
	assert.Nil(t, v21.FromPbText(v21.ToPbText()))
	config.SetIpv6Pattern(v21)
	v25 := config.MacPattern()
	v26 := v25.Mac()
	v26.SetValue("00:00:00:00:00:0a").SetValues([]string{"00:00:00:00:00:0a"})
	v27 := v26.Increment()
	v27.SetStart("00:00:00:00:00:0a").SetStep("00:00:00:00:00:0a").SetCount(1)
	v27.HasStart()
	v27.HasStep()
	v27.HasCount()
	v27.Start()
	v27.Step()
	v27.Count()
	v27.ToJson()
	v27.ToYaml()
	v27.ToPbText()
	assert.Nil(t, v27.FromJson(v27.ToJson()))
	assert.Nil(t, v27.FromYaml(v27.ToYaml()))
	assert.Nil(t, v27.FromPbText(v27.ToPbText()))
	v26.SetIncrement(v27)
	v28 := v26.Decrement()
	v28.SetStart("00:00:00:00:00:0a").SetStep("00:00:00:00:00:0a").SetCount(1)
	v28.HasStart()
	v28.HasStep()
	v28.HasCount()
	v28.Start()
	v28.Step()
	v28.Count()
	v28.ToJson()
	v28.ToYaml()
	v28.ToPbText()
	assert.Nil(t, v28.FromJson(v28.ToJson()))
	assert.Nil(t, v28.FromYaml(v28.ToYaml()))
	assert.Nil(t, v28.FromPbText(v28.ToPbText()))
	v26.SetDecrement(v28)
	v26.HasChoice()
	v26.HasValue()
	v26.HasIncrement()
	v26.HasDecrement()
	v26.Choice()
	v26.Value()
	v26.Values()
	v26.ToJson()
	v26.ToYaml()
	v26.ToPbText()
	assert.Nil(t, v26.FromJson(v26.ToJson()))
	assert.Nil(t, v26.FromYaml(v26.ToYaml()))
	assert.Nil(t, v26.FromPbText(v26.ToPbText()))
	v25.SetMac(v26)
	v25.HasMac()
	v25.ToJson()
	v25.ToYaml()
	v25.ToPbText()
	assert.Nil(t, v25.FromJson(v25.ToJson()))
	assert.Nil(t, v25.FromYaml(v25.ToYaml()))
	assert.Nil(t, v25.FromPbText(v25.ToPbText()))
	config.SetMacPattern(v25)
	v29 := config.IntegerPattern()
	v30 := v29.Integer()
	v30.SetValue(213).SetValues([]int32{20})
	v31 := v30.Increment()
	v31.SetStart(58).SetStep(246).SetCount(1)
	v31.HasStart()
	v31.HasStep()
	v31.HasCount()
	v31.Step()
	v31.Count()
	v31.ToJson()
	v31.ToYaml()
	v31.ToPbText()
	assert.Nil(t, v31.FromJson(v31.ToJson()))
	assert.Nil(t, v31.FromYaml(v31.ToYaml()))
	assert.Nil(t, v31.FromPbText(v31.ToPbText()))
	v30.SetIncrement(v31)
	v32 := v30.Decrement()
	v32.SetStart(198).SetStep(167).SetCount(1)
	v32.HasStart()
	v32.HasStep()
	v32.HasCount()
	v32.Step()
	v32.Count()
	v32.ToJson()
	v32.ToYaml()
	v32.ToPbText()
	assert.Nil(t, v32.FromJson(v32.ToJson()))
	assert.Nil(t, v32.FromYaml(v32.ToYaml()))
	assert.Nil(t, v32.FromPbText(v32.ToPbText()))
	v30.SetDecrement(v32)
	v30.HasChoice()
	v30.HasValue()
	v30.HasIncrement()
	v30.HasDecrement()
	v30.Choice()
	v30.Values()
	v30.ToJson()
	v30.ToYaml()
	v30.ToPbText()
	assert.Nil(t, v30.FromJson(v30.ToJson()))
	assert.Nil(t, v30.FromYaml(v30.ToYaml()))
	assert.Nil(t, v30.FromPbText(v30.ToPbText()))
	v29.SetInteger(v30)
	v29.HasInteger()
	v29.ToJson()
	v29.ToYaml()
	v29.ToPbText()
	assert.Nil(t, v29.FromJson(v29.ToJson()))
	assert.Nil(t, v29.FromYaml(v29.ToYaml()))
	assert.Nil(t, v29.FromPbText(v29.ToPbText()))
	config.SetIntegerPattern(v29)
	v33 := config.ChecksumPattern()
	v34 := v33.Checksum()
	v34.SetGenerated("good").SetCustom(87)
	v34.HasGenerated()
	v34.HasCustom()
	v34.Choice()
	v34.Generated()
	v34.ToJson()
	v34.ToYaml()
	v34.ToPbText()
	assert.Nil(t, v34.FromJson(v34.ToJson()))
	assert.Nil(t, v34.FromYaml(v34.ToYaml()))
	assert.Nil(t, v34.FromPbText(v34.ToPbText()))
	v33.SetChecksum(v34)
	v33.HasChecksum()
	v33.ToJson()
	v33.ToYaml()
	v33.ToPbText()
	assert.Nil(t, v33.FromJson(v33.ToJson()))
	assert.Nil(t, v33.FromYaml(v33.ToYaml()))
	assert.Nil(t, v33.FromPbText(v33.ToPbText()))
	config.SetChecksumPattern(v33)
	v35 := config.MObject()
	v35.SetString("abc").SetInteger(23).SetFloat(100.11).SetDouble(1.7976931348623157e+308).SetMac("00:00:00:00:00:0a").SetIpv4("1.1.1.1").SetIpv6("2000::1").SetHex("0x12")
	v35.ToJson()
	v35.ToYaml()
	v35.ToPbText()
	assert.Nil(t, v35.FromJson(v35.ToJson()))
	assert.Nil(t, v35.FromYaml(v35.ToYaml()))
	assert.Nil(t, v35.FromPbText(v35.ToPbText()))
	config.SetMObject(v35)
	v36 := config.HeaderChecksum()
	v36.SetGenerated("good").SetCustom(11268)
	v36.HasGenerated()
	v36.HasCustom()
	v36.Choice()
	v36.Generated()
	v36.ToJson()
	v36.ToYaml()
	v36.ToPbText()
	assert.Nil(t, v36.FromJson(v36.ToJson()))
	assert.Nil(t, v36.FromYaml(v36.ToYaml()))
	assert.Nil(t, v36.FromPbText(v36.ToPbText()))
	config.SetHeaderChecksum(v36)
	config.HasOptionalObject()
	config.HasIeee8021Qbb()
	config.HasSpace1()
	config.HasFullDuplex100Mb()
	config.HasE()
	config.HasF()
	config.HasH()
	config.HasK()
	config.HasL()
	config.HasLevel()
	config.HasMandatory()
	config.HasIpv4Pattern()
	config.HasIpv6Pattern()
	config.HasMacPattern()
	config.HasIntegerPattern()
	config.HasChecksumPattern()
	config.HasCase()
	config.HasMObject()
	config.HasInteger64()
	config.HasHeaderChecksum()
	config.HasStrLen()
	config.HasName()
	config.Response()
	config.A()
	config.B()
	config.C()
	config.H()
	config.ToJson()
	config.ToYaml()
	config.ToPbText()
	assert.Nil(t, config.FromJson(config.ToJson()))
	assert.Nil(t, config.FromYaml(config.ToYaml()))
	assert.Nil(t, config.FromPbText(config.ToPbText()))
}
