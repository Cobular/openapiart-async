// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sanity

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenapiClient is the client API for Openapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenapiClient interface {
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (Openapi_SetConfigClient, error)
	GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error)
}

type openapiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenapiClient(cc grpc.ClientConnInterface) OpenapiClient {
	return &openapiClient{cc}
}

func (c *openapiClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (Openapi_SetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &Openapi_ServiceDesc.Streams[0], "/sanity.Openapi/SetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &openapiSetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Openapi_SetConfigClient interface {
	Recv() (*SetConfigResponse, error)
	grpc.ClientStream
}

type openapiSetConfigClient struct {
	grpc.ClientStream
}

func (x *openapiSetConfigClient) Recv() (*SetConfigResponse, error) {
	m := new(SetConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openapiClient) GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenapiServer is the server API for Openapi service.
// All implementations must embed UnimplementedOpenapiServer
// for forward compatibility
type OpenapiServer interface {
	SetConfig(*SetConfigRequest, Openapi_SetConfigServer) error
	GetConfig(context.Context, *empty.Empty) (*GetConfigResponse, error)
	mustEmbedUnimplementedOpenapiServer()
}

// UnimplementedOpenapiServer must be embedded to have forward compatible implementations.
type UnimplementedOpenapiServer struct {
}

func (UnimplementedOpenapiServer) SetConfig(*SetConfigRequest, Openapi_SetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedOpenapiServer) GetConfig(context.Context, *empty.Empty) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedOpenapiServer) mustEmbedUnimplementedOpenapiServer() {}

// UnsafeOpenapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenapiServer will
// result in compilation errors.
type UnsafeOpenapiServer interface {
	mustEmbedUnimplementedOpenapiServer()
}

func RegisterOpenapiServer(s grpc.ServiceRegistrar, srv OpenapiServer) {
	s.RegisterService(&Openapi_ServiceDesc, srv)
}

func _Openapi_SetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenapiServer).SetConfig(m, &openapiSetConfigServer{stream})
}

type Openapi_SetConfigServer interface {
	Send(*SetConfigResponse) error
	grpc.ServerStream
}

type openapiSetConfigServer struct {
	grpc.ServerStream
}

func (x *openapiSetConfigServer) Send(m *SetConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Openapi_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Openapi_ServiceDesc is the grpc.ServiceDesc for Openapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Openapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sanity.Openapi",
	HandlerType: (*OpenapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Openapi_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetConfig",
			Handler:       _Openapi_SetConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sanity.proto",
}
